window.indexedDB=window.indexedDB||window.mozIndexedDB||window.webkitIndexedDB||window.msIndexedDB;class Idb{constructor(e,t){this.jsonUrl="http://localhost:1337/",this.dbName=e,this.dbVersion=t,this.idb=null,this.db=null,this.openDb().then(()=>{"rr-restaurants"===this.dbName&&this.fillDb()})}openDb(){return new Promise((e,t)=>{this.idb=window.indexedDB.open(this.dbName,this.dbVersion),this.idb.onsuccess=(t=>{this.db=t.target.result,e()}),this.idb.onerror=(e=>{console.error("openDb: ",e.target.errorCode),t()}),this.idb.onupgradeneeded=(e=>{const t={keyPath:"id"};"rr-offline"===this.dbName&&(t.autoIncrement=!0);const n=e.target.result.createObjectStore(this.dbName,t);"rr-restaurants"===this.dbName?(n.createIndex("neighborhood","neighborhood"),n.createIndex("cuisine_type","cuisine_type"),n.createIndex("neighborhood_cuisine_type",["neighborhood","cuisine_type"])):"rr-reviews"===this.dbName&&n.createIndex("restaurant_id","restaurant_id")})})}getDbR(){return this.db.transaction(this.dbName).objectStore(this.dbName)}getDbRW(){return this.db.transaction(this.dbName,"readwrite").objectStore(this.dbName)}getAll(){return new Promise((e,t)=>{const n=this.getDbR().getAll();n.onsuccess=(()=>{e(n.result)}),n.onerror=(()=>{t("Error getAll")})})}getById(e){return new Promise((t,n)=>{const r=this.getDbR().get(parseInt(e));r.onsuccess=(()=>{t(r.result)}),r.onerror=(()=>{n("Error getById")})})}sendReview(e){return new Promise((t,n)=>{fetch(`${this.jsonUrl}reviews/`,{method:"POST",body:JSON.stringify(e),headers:{"content-type":"application/json"}}).then(e=>e.json()).then(e=>{this.getDbRW().put(e),t(e)}).catch(()=>{e.type="review",window.offlineIdb.getDbRW().put(e),e.id=Date.now(),this.getDbRW().put(e),n(e)})})}setFavoriteById(e,t=!0){return new Promise((n,r)=>{this.getById(e).then(i=>{i.is_favorite=t,this.getDbRW().put(i),fetch(`${this.jsonUrl}restaurants/${e}/?is_favorite=${t.toString()}`,{method:"PUT"}).then(()=>{n()}).catch(()=>{const i=window.offlineIdb.getDbRW().put({type:"favorite",restaurant_id:e,is_favorite:t});i.onsuccess=(()=>{n()}),i.onerror=(()=>{r()})})}).catch(()=>{r()})})}getByIndex(e,t){return new Promise((n,r)=>{const i=this.getDbR().index(e).getAll(t);i.onsuccess=(()=>{n(i.result)}),i.onerror=(()=>{r("Error getByIndex")})})}getReviewByIndex(e,t){return new Promise((n,r)=>{fetch(`${this.jsonUrl}reviews/?restaurant_id=${t}`).then(e=>e.json()).then(e=>{if(e.length>0){const t=this.getDbRW();e.forEach(e=>{t.put(e)}),n(e)}else r("Error getReviewByIndex")}).catch(()=>{const i=this.getDbR().index(e).getAll(t);i.onsuccess=(()=>{i.result.length>0&&n(i.result)}),i.onerror=(()=>{r()})})})}fillDb(){fetch(`${this.jsonUrl}restaurants`).then(e=>e.json()).then(e=>{if(e.length>0){const t=this.getDbRW();e.forEach(e=>{t.put(e)})}})}}window.idb=new Idb("rr-restaurants",1),window.reviewIdb=new Idb("rr-reviews",1),window.offlineIdb=new Idb("rr-offline",1),window.offlineUpdate=window.setInterval(()=>{window.offlineIdb.getAll().then(e=>{e.forEach(e=>{"review"===e.type?fetch(`${window.offlineIdb.jsonUrl}reviews/`,{method:"POST",body:JSON.stringify(e),headers:{"content-type":"application/json"}}).then(()=>{window.offlineIdb.getDbRW().delete(e.id)}).catch(()=>{}):"favorite"===e.type&&fetch(`${window.offlineIdb.jsonUrl}restaurants/${e.restaurant_id}/?is_favorite=${e.is_favorite.toString()}`,{method:"PUT"}).then(()=>{window.offlineIdb.getDbRW().delete(e.id)}).catch(()=>{})})})},1e4);